# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pathlib import Path
import sys

path_root = Path(__file__).parents[0]
sys.path.append(str(path_root))

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.stream_stream(
                '/mafia.Mafia/connect',
                request_serializer=mafia__pb2.ConnectionClientRequest.SerializeToString,
                response_deserializer=mafia__pb2.ConnectionServerResponse.FromString,
                )
        self.day = channel.unary_stream(
                '/mafia.Mafia/day',
                request_serializer=mafia__pb2.DayClientRequest.SerializeToString,
                response_deserializer=mafia__pb2.DayServerResponse.FromString,
                )
        self.night = channel.unary_stream(
                '/mafia.Mafia/night',
                request_serializer=mafia__pb2.NightClientRequest.SerializeToString,
                response_deserializer=mafia__pb2.NightServerResponse.FromString,
                )
        self.disconnect = channel.unary_unary(
                '/mafia.Mafia/disconnect',
                request_serializer=mafia__pb2.DisconnectClientRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def day(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def night(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.stream_stream_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=mafia__pb2.ConnectionClientRequest.FromString,
                    response_serializer=mafia__pb2.ConnectionServerResponse.SerializeToString,
            ),
            'day': grpc.unary_stream_rpc_method_handler(
                    servicer.day,
                    request_deserializer=mafia__pb2.DayClientRequest.FromString,
                    response_serializer=mafia__pb2.DayServerResponse.SerializeToString,
            ),
            'night': grpc.unary_stream_rpc_method_handler(
                    servicer.night,
                    request_deserializer=mafia__pb2.NightClientRequest.FromString,
                    response_serializer=mafia__pb2.NightServerResponse.SerializeToString,
            ),
            'disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=mafia__pb2.DisconnectClientRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mafia.Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/mafia.Mafia/connect',
            mafia__pb2.ConnectionClientRequest.SerializeToString,
            mafia__pb2.ConnectionServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def day(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mafia.Mafia/day',
            mafia__pb2.DayClientRequest.SerializeToString,
            mafia__pb2.DayServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def night(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mafia.Mafia/night',
            mafia__pb2.NightClientRequest.SerializeToString,
            mafia__pb2.NightServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mafia.Mafia/disconnect',
            mafia__pb2.DisconnectClientRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
